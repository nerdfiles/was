// Generated by CoffeeScript 1.11.1

/*
@fileOverview ./src/actions/describeInstances.coffee
 */
var DescribeInstances,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

import {
  util
} from 'util';

import {
  AWS
} from 'aws-sdk';

import {
  _
} from 'lodash';

import {
  Action
} from 'mover';


/*
Run one or more describeInstances requests to get a count of instances.

@param {AWS.EC2} ec2Client A client with suitable credentials.
@param {String} instanceType The instance type, e.g. 't2.medium'.
@param {Function} callback Of the form function (error, count).
 */

DescribeInstances = (function(superClass) {
  extend(DescribeInstances, superClass);

  function DescribeInstances(ec2Client, instanceType, callback) {
    this.instanceCount = 0;
  }

  DescribeInstances.prototype.recurse = function(nextToken) {
    var params;
    params = {
      Filters: [
        {
          Name: 'instance-type',
          Values: [instanceType]
        }, {
          Name: 'instance-state-name',
          Values: ['running']
        }
      ]
    };
    if (nextToken) {
      params.NextToken = nextToken;
    }
    return ec2Client.describeInstances(params, function(error, response) {
      if (error) {
        return callback(error);
      }
      _.each(response.Reservations, function(reservation) {
        return this.instanceCount += reservation.Instances.length;
      });
      if (response.NextToken) {
        return recurse(response.NextToken);
      } else {
        return callback(null, this.instanceCount);
      }
    });
  };

  return DescribeInstances;

})(Action);

export default DescribeInstances;
