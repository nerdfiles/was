// Generated by CoffeeScript 1.11.1

/*
@fileOverview ./src/actions/assumeRole.coffee
 */
var ObtainInstanceCount,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

import {
  util
} from 'util';

import {
  AWS
} from 'aws-sdk';

import {
  Action
} from 'mover';

import {
  DescribeInstances
} from './describeInstances';


/*
Obtain the running instance count for a particular type from another account.

@param {String} accountId The account to access, e.g. '555666777888'.
@param {String} instanceType The instance type, e.g. 't2.medium'.
@param {Function} callback Of the form function (error, count).
 */

ObtainInstanceCount = (function(superClass) {
  extend(ObtainInstanceCount, superClass);

  function ObtainInstanceCount(accountId, instanceType, callback) {
    this.stsClient = new AWS.STS();
    this.defaultRoleConfig = {
      RoleSessionName: 'instance-counter',
      DurationSeconds: 3600,
      RoleArn: util.format('arn:aws:iam::%s:role/CrossAccountInstanceCounter', accountId)
    };
  }

  ObtainInstanceCount.prototype.assume = function(roleConfig) {
    var assumedRole, loadedRoleConfig;
    if (roleConfig == null) {
      roleConfig = {};
    }
    loadedRoleConfig = roleConfig || this.defaultRoleConfig;
    this.stsClient.assumeRole(loadedRoleConfig, assumedRole);
    return assumedRole = function(error, response) {
      var ec2Client;
      if (error) {
        return callback(error);
      }
      ec2Client = new AWS.EC2({
        accessKeyId: response.Credentials.AccessKeyId,
        secretAccessKey: response.Credentials.SecretAccessKey,
        sessionToken: response.Credentials.SessionToken
      });
      return DescribeInstances(ec2Client, instanceType, callback);
    };
  };

  return ObtainInstanceCount;

})(Action);

export default ObtainInstanceCount;
